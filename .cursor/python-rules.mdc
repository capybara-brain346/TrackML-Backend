---
description: 
globs: 
alwaysApply: false
---
# AI Code Editor Rules for Python (Custom Configuration)

## Naming Conventions
- Use `snake_case` for variables and functions.
- Use `PascalCase` for class names.
- Constants should be in `UPPER_SNAKE_CASE`.
- Do not use single-character variable names except for counters (`i`, `j`) in loops.

## Imports
- Always place imports at the top of the file.
- Group imports as: standard library, third-party libraries, local modules.
- Avoid wildcard imports (`from module import *`).
- Use `import` over `from module import` unless importing specific components.

## Docstrings
- Use triple double quotes `"""` for all docstrings.
- Functions and classes must have docstrings describing **purpose**, **inputs**, and **outputs**.
- Follow Google-style or NumPy-style docstrings for larger functions.

## Type Hints
- Use type hints in all functions.
- Include return type annotations.
- Use `Optional[]`, `List[]`, `Dict[]` from `typing` where appropriate.

## Error Handling
- Use specific exception types, not bare `except`.
- Log errors where necessary using `logging`.
- Avoid silent failures.

## Code Style
- Enforce line length ≤ 88 characters (Black default).
- Indentation: 4 spaces.
- Use `f-strings` for string interpolation.
- Avoid unnecessary lambda expressions—prefer `def` for clarity.
- Avoid mutable default arguments like `def func(arg=[])`.

## Function Design
- Functions should do one thing only (Single Responsibility Principle).
- Keep functions ≤ 50 lines. Break into helper functions if longer.
- Use early returns instead of deeply nested `if` statements.

## Class Design
- Use classes where state or grouping behavior makes sense.
- Class methods should be short and focused.
- Prefer `@classmethod` or `@staticmethod` only when justified.

## Logging & Debugging
- Use `logging` module, not `print()`, for runtime logs.
- Levels: `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`.
- Add `logger` instances per module.

## File & Folder Structure
- Organize by feature/module, not type.
- Use `__init__.py` in all packages.
- Config files should be in YAML/JSON/ENV, never hardcoded.

## Security & Best Practices
- Never expose secrets or tokens in code.
- Use `os.getenv()` or `dotenv` to manage environment variables.
- Validate all user inputs if exposed to a public interface.





